import { useState } from "react";
import { Shield, Play, Pause, Target, AlertTriangle } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Checkbox } from "@/components/ui/checkbox";
import { useScan } from "@/contexts/ScanContext";
import { testEndpoint, generatePayloads } from "@/lib/scanEngine";
import { useToast } from "@/hooks/use-toast";

const VulnerabilityScanner = () => {
  const { scanState, updateScanState, addVulnerability, addLog } = useScan();
  const { toast } = useToast();
  const [isTesting, setIsTesting] = useState(false);
  const [testProgress, setTestProgress] = useState(0);
  const [selectedTypes, setSelectedTypes] = useState({
    SQLi: true,
    XSS: true,
  });

  const handleStartTest = async () => {
    if (scanState.endpoints.length === 0) {
      toast({
        title: "No Endpoints",
        description: "Run the crawler first to discover endpoints",
        variant: "destructive",
      });
      return;
    }

    setIsTesting(true);
    setTestProgress(0);

    const totalTests = scanState.endpoints.length * 
      ((selectedTypes.SQLi ? 1 : 0) + (selectedTypes.XSS ? 1 : 0));
    let completed = 0;

    const payloadsGenerated = scanState.endpoints.length * 
      ((selectedTypes.SQLi ? generatePayloads('SQLi').length : 0) + 
       (selectedTypes.XSS ? generatePayloads('XSS').length : 0));

    updateScanState({
      statistics: {
        ...scanState.statistics,
        payloadsGenerated,
      },
    });

    for (const endpoint of scanState.endpoints) {
      // Test for SQLi
      if (selectedTypes.SQLi) {
        const result = await testEndpoint(endpoint, scanState.targetUrl, 'SQLi');
        
        const log = {
          timestamp: new Date().toISOString(),
          endpoint: endpoint.url,
          payload: result.payload || "Test payload",
          status: result.vulnerable ? 'success' as const : 'failed' as const,
          response: result.response || "No vulnerability detected",
          latency: Math.floor(Math.random() * 200) + 50,
        };
        addLog(log);

        if (result.vulnerable) {
          addVulnerability({
            type: 'SQLi',
            endpoint: endpoint.url,
            severity: 'Critical',
            payload: result.payload || '',
            response: result.response,
            timestamp: new Date().toISOString(),
          });
        }

        completed++;
        setTestProgress((completed / totalTests) * 100);
        await new Promise(resolve => setTimeout(resolve, 500));
      }

      // Test for XSS
      if (selectedTypes.XSS) {
        const result = await testEndpoint(endpoint, scanState.targetUrl, 'XSS');
        
        const log = {
          timestamp: new Date().toISOString(),
          endpoint: endpoint.url,
          payload: result.payload || "Test payload",
          status: result.vulnerable ? 'success' as const : 'failed' as const,
          response: result.response || "No vulnerability detected",
          latency: Math.floor(Math.random() * 200) + 50,
        };
        addLog(log);

        if (result.vulnerable) {
          addVulnerability({
            type: 'XSS',
            endpoint: endpoint.url,
            severity: 'High',
            payload: result.payload || '',
            response: result.response,
            timestamp: new Date().toISOString(),
          });
        }

        completed++;
        setTestProgress((completed / totalTests) * 100);
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    }

    setIsTesting(false);
    setTestProgress(100);

    toast({
      title: "Scan Complete",
      description: `Found ${scanState.vulnerabilities.length} vulnerabilities`,
    });
  };

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-bold text-primary flex items-center gap-3">
          <Shield className="w-7 h-7" />
          Vulnerability Scanner
        </h2>
        <p className="text-muted-foreground mt-1">
          Test discovered endpoints for security vulnerabilities
        </p>
      </div>

      {/* Scanner Configuration */}
      <Card className="border-primary/20">
        <CardHeader>
          <CardTitle className="text-lg text-primary">Test Configuration</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-3">
            <p className="text-sm text-muted-foreground">Select vulnerability types to test:</p>
            <div className="flex flex-col gap-2">
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="sqli"
                  checked={selectedTypes.SQLi}
                  onCheckedChange={(checked) =>
                    setSelectedTypes({ ...selectedTypes, SQLi: !!checked })
                  }
                  disabled={isTesting}
                />
                <label
                  htmlFor="sqli"
                  className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                >
                  SQL Injection (SQLi)
                </label>
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="xss"
                  checked={selectedTypes.XSS}
                  onCheckedChange={(checked) =>
                    setSelectedTypes({ ...selectedTypes, XSS: !!checked })
                  }
                  disabled={isTesting}
                />
                <label
                  htmlFor="xss"
                  className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                >
                  Cross-Site Scripting (XSS)
                </label>
              </div>
            </div>
          </div>

          <div className="flex items-center gap-2 p-3 border border-border rounded bg-terminal-bg">
            <Target className="w-4 h-4 text-primary" />
            <span className="text-sm text-muted-foreground">
              Target: <span className="text-foreground font-mono">{scanState.targetUrl || 'No target set'}</span>
            </span>
          </div>

          <div className="flex items-center gap-2 p-3 border border-border rounded bg-terminal-bg">
            <AlertTriangle className="w-4 h-4 text-warning" />
            <span className="text-sm text-muted-foreground">
              Endpoints to test: <span className="text-foreground font-mono">{scanState.endpoints.length}</span>
            </span>
          </div>

          {isTesting && (
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">Testing endpoints...</span>
                <span className="text-primary font-mono">{Math.round(testProgress)}%</span>
              </div>
              <Progress value={testProgress} className="h-2" />
            </div>
          )}

          <Button
            onClick={handleStartTest}
            disabled={isTesting || scanState.endpoints.length === 0 || (!selectedTypes.SQLi && !selectedTypes.XSS)}
            className="w-full bg-primary text-primary-foreground hover:bg-primary/90"
          >
            {isTesting ? (
              <>
                <Pause className="w-4 h-4 mr-2" />
                Testing...
              </>
            ) : (
              <>
                <Play className="w-4 h-4 mr-2" />
                Start Vulnerability Test
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {/* Test Results */}
      <Card className="border-primary/20">
        <CardHeader>
          <CardTitle className="text-lg text-primary flex items-center justify-between">
            <span>Test Results</span>
            <Badge className="bg-primary text-primary-foreground">
              {scanState.vulnerabilities.length} vulnerabilities
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          {scanState.vulnerabilities.length === 0 ? (
            <div className="text-center py-8 text-muted-foreground">
              No vulnerabilities found yet. Run a test to begin.
            </div>
          ) : (
            <div className="space-y-2">
              {scanState.vulnerabilities.map((vuln, idx) => (
                <div
                  key={idx}
                  className={`p-3 border rounded ${
                    vuln.severity === 'Critical'
                      ? 'border-destructive/30 bg-destructive/5'
                      : 'border-warning/30 bg-warning/5'
                  }`}
                >
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-3">
                      <Badge
                        variant={vuln.severity === 'Critical' ? 'destructive' : 'secondary'}
                        className={
                          vuln.severity === 'Critical'
                            ? 'bg-destructive text-destructive-foreground'
                            : 'bg-warning text-warning-foreground'
                        }
                      >
                        {vuln.type}
                      </Badge>
                      <code className="text-sm font-mono text-foreground">{vuln.endpoint}</code>
                    </div>
                    <Badge variant="outline" className="text-xs">
                      {vuln.severity}
                    </Badge>
                  </div>
                  <div className="text-xs text-muted-foreground">
                    <span className="font-semibold">Payload:</span>{' '}
                    <code className="bg-terminal-bg px-1 rounded">{vuln.payload}</code>
                  </div>
                  {vuln.response && (
                    <div className="text-xs text-muted-foreground mt-1">
                      <span className="font-semibold">Response:</span> {vuln.response}
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default VulnerabilityScanner;
